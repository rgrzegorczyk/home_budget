--liquibase formatted sql
--changeset rgrzegorczyk:CALL_RESULT runOnChange:true stripComments:false
--rollback DROP TYPE CALL_RESULT;
--------------------------------------------------------
--  DDL for Type CALL_RESULT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE CALL_RESULT AS OBJECT
(
  STATUS varchar2(30 byte),
  MESSAGE varchar2(4000 byte),
  EXTRA_CODE varchar2(100 byte),
  NEW_OBJECT_ID NUMBER,
  COUNT_OK number,
  COUNT_ERR number,
CONSTRUCTOR FUNCTION CALL_RESULT  RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2) RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2) RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_count_ok NUMBER, pi_count_err NUMBER) RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2,pi_EXTRA_CODE VARCHAR2) RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_NEW_OBJECT_ID NUMBER) RETURN SELF AS RESULT,
CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_EXTRA_CODE VARCHAR2, pi_NEW_OBJECT_ID NUMBER) RETURN SELF AS RESULT,

MEMBER function RESULT_OK(pi_message varchar2) return CALL_RESULT,
MEMBER function RESULT_ERR(pi_message varchar2) return CALL_RESULT,

MEMBER function IS_OK return BOOLEAN,
MEMBER function IS_NOT_OK return BOOLEAN,
MEMBER function IS_ERR return BOOLEAN,
MEMBER function IS_NOT_ERR return BOOLEAN

);
/
CREATE OR REPLACE EDITIONABLE TYPE BODY "CALL_RESULT" as

CONSTRUCTOR FUNCTION CALL_RESULT  RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=null;
  SELF.MESSAGE:=null;
  SELF.EXTRA_CODE:=null;
  SELF.NEW_OBJECT_ID:=null;  RETURN;
END;

CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=null;
  SELF.EXTRA_CODE:=null;
  SELF.NEW_OBJECT_ID:=null;
  RETURN;
END;

CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=pi_message;
  SELF.EXTRA_CODE:=null;
  SELF.NEW_OBJECT_ID:=null;
  RETURN;
END;

CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_count_ok NUMBER, pi_count_err NUMBER) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=pi_message;
  SELF.EXTRA_CODE:=null;
  SELF.NEW_OBJECT_ID:=null;
  SELF.COUNT_OK := pi_count_ok;
  SELF.COUNT_ERR := pi_count_err;
  RETURN;
END;


CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2,pi_EXTRA_CODE VARCHAR2) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=pi_message;
  SELF.EXTRA_CODE:=pi_EXTRA_CODE;
  SELF.NEW_OBJECT_ID:=null;
  RETURN;
END;

CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_NEW_OBJECT_ID NUMBER) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=pi_message;
  SELF.EXTRA_CODE:=null;
  SELF.NEW_OBJECT_ID:=pi_NEW_OBJECT_ID;
  RETURN;
END;

CONSTRUCTOR FUNCTION CALL_RESULT(pi_status VARCHAR2, pi_message VARCHAR2, pi_EXTRA_CODE VARCHAR2, pi_NEW_OBJECT_ID NUMBER) RETURN SELF AS RESULT
AS
BEGIN
  SELF.STATUS:=pi_status;
  SELF.MESSAGE:=pi_message;
  SELF.EXTRA_CODE:=pi_EXTRA_CODE;
  SELF.NEW_OBJECT_ID:=pi_NEW_OBJECT_ID;
  RETURN;
END;


MEMBER function RESULT_OK(pi_message varchar2) return CALL_RESULT AS
BEGIN
  RETURN CALL_RESULT(CONST_PKG.C_RESULT_OK,pi_message);
END;

MEMBER function RESULT_ERR(pi_message varchar2) return CALL_RESULT AS
BEGIN
  RETURN CALL_RESULT(CONST_PKG.C_RESULT_ERR,pi_message);
END;

MEMBER function IS_OK return BOOLEAN
AS
BEGIN
  IF self.STATUS = CONST_PKG.C_RESULT_OK THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;

MEMBER function IS_NOT_OK return BOOLEAN
AS
BEGIN
  IF self.STATUS = CONST_PKG.C_RESULT_OK THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;

MEMBER function IS_ERR return BOOLEAN
AS
BEGIN
  IF self.STATUS = CONST_PKG.C_RESULT_ERR THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;

MEMBER function IS_NOT_ERR return BOOLEAN
AS
BEGIN
  IF self.STATUS = CONST_PKG.C_RESULT_ERR THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;
END;


/
